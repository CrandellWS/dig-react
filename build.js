#!/usr/bin/env node
/* eslint no-console:0 */
process.env.NODE_DEBUG = fs;
var clog = console.log;

var fs         = require('fs');
var path       = require('path');
var glob       = require('glob');
var del        = require('del');
var mkdirp     = require('mkdirp');
var rsvp       = require('rsvp');
var exec       = require('child_process').exec;
var argv       = require('minimist')(process.argv.slice(2));

var fopen   = rsvp.denodeify(fs.open);
var fread   = rsvp.denodeify(fs.readFile);
var globp   = rsvp.denodeify(glob);
var frename = rsvp.denodeify(fs.rename);

var MODE     = argv.mode || (argv.p ? 'prod' : 'dev');
var buildAll = argv.all || argv.a || argv.p;
var verbose  = argv.verbose || argv.v || false;
var APP_NAME = argv.pells ? 'pells' : (argv.dig ? 'dig' : (argv.app || 'dig'));

clog( '------------------------ Building ------------------------');
clog( ' options: ', argv );
clog( ' APP(', APP_NAME, ') MODE(', MODE, ') ALL(', buildAll, ') VERBOSE(', verbose, ') ' );
clog( '----------------------------------------------------------');

var TEMP_DIR      = tmpDir();

//
// in dev mode we just build in place
// in prod mode we build in tmp/ and need
// to stage after
//
var BUILD_DIR     = MODE === 'dev' ? './' : TEMP_DIR;

var SERVER_TARGET = APP_NAME + '/';
var WEB_TARGET    = SERVER_TARGET + 'web/';

var SERVER_DIR    = BUILD_DIR + SERVER_TARGET;

// N.B. WEB_DIR is assumed to be below SERVER_DIR
var WEB_DIR       = SERVER_DIR + 'web/';

build();

function build() {

  var commonBuilders = [ 
        bundleAppCSSFiles,
        publishAppPublicFiles,
        publishServerLibrary,
        bundleAppJS
      ];  

  if( buildAll ) {

    var allBuilders = [ 
          bundleVendorJSFiles, 
          bundleVendorCSSFiles, 
          publishVendorFontFiles,
          publishVendorSWFFiles,
        ];

    lintSource()
      .then( () => mkdirs() )
      .then( () => generateComponentIndex() )
      .then( () => makePromises( commonBuilders ) )
      .then( () => makePromises( allBuilders ) )
      .then( () => minifyDist() )
      .then( () => stageResults() )
      .then( () => clean() )
      .then( () => clog('build done') )
      .catch( err );    

  } else {

    lintSource()
      .then( () => generateComponentIndex() )
      .then( () => makePromises( commonBuilders ) )
      .then( () => clog('build done') )
      .catch( err );    
  }

}

function makePromises(arr) {
  return rsvp.all( arr.map( p => p() ) );
}

function clean() {
  if( MODE === 'dev' ) {
    return rsvp.resolve(0);
  }
  var delfiles = [ TEMP_DIR ];
  clog('delfiles ', delfiles );
  return del( delfiles )
        .then( (files) => { 
            clog( `deleted ${files.length} files`);
          });
}

function mkdirs() {
  return new rsvp.Promise( function( success, reject  ) {
      mkdir( WEB_DIR );
      success('ok');
    });
}

function stageResults() {
  if( MODE === 'dev' ) {
    return rsvp.resolve(0);
  }

  clog('staging results');

  var tmp = tmpDir();

  mkdir( SERVER_TARGET ); // first time ever build requires this

  return rename( SERVER_TARGET, tmp )
          .then( () => rename( SERVER_DIR, SERVER_TARGET ))
          .then( () => del( [tmp+'**',tmp] ) )
          .then( (files) => { 
            log( `deleted ${files.length} files in ${tmp}`);
          });
}

function rename( from, to ) {
  log( `renaming ${from} => ${to}` );
  return frename( from, to );
}

function generateIndexJS(dir,formatter) {
  var str = `// this file is generated by the build process \n\nmodule.exports = { \n`;
  var iname = `./app/${dir}/index.js`;

  return del( iname )
    .then( function() {
      return globp(`./app/${dir}/*`);
    }).then( function(files) {
      files.forEach( f => {
        var name = path.parse(f).name;
        var rname = formatter(name);
        str += `  ${rname}: require('./${name}'),\n`;
      });
      str += `\n};\n\n`;
      log(`writing ${iname}`);
      fs.writeFileSync( iname, str, 'utf8' );
    });
}

function generateComponentIndex() {
  return generateIndexJS('components', n => n);
}

function lintSource() {
  clog('invoking lint');
  return execp('eslint app');
}

function publishServerLibrary() {
  log('creating server runtime')
  var cmd = 'babel app --out-dir ' + SERVER_DIR;
  clog('compiling to ',SERVER_DIR);
  return execp(cmd);
}

function minifyDist() {
  if( MODE === 'dev' ) {
    log( 'skipping minify' );
    return rsvp.resolve({});
  }
  var dir = WEB_DIR;
  var app = APP_NAME;
  log(`spawning uglify for ${dir} js/css`);
  var cssCmd = `uglify -s ${dir}css/${app}.css  -o ${dir}css/${app}.css -c`;
  var jsCmd  = `uglify -s ${dir}js/${app}.js -o ${dir}js/${app}.js`;
  return execp(cssCmd).then( () => execp( jsCmd ) );
}

function publishAppPublicFiles() {

  mkdir( WEB_DIR + 'images');

  var rootd = /public\/[^\/]+\//;
  clog('publishing web files to',WEB_DIR);

  return globp( `public/{shared,${APP_NAME}}/{*.html,*.ico,*.xml,*.txt,*.png,images/*.*}`)
    .then( fnames => fnames.forEach( f => copy( f, f.replace(rootd, WEB_DIR ) ) ) );    
}

function bundleAppCSSFiles() {
  return globp( `public/{shared,${APP_NAME}}/css/*.css` )
    .then( files => bundleAppFiles(files,'css') );
}

function _compileTemplate(platform, outfile) {

  var text  = fs.readFileSync( `app/${platform}.template`, 'utf8' );
  var app   = APP_NAME;
      text  = text.replace(/\{app\}/g, app );
  var fname = outfile || `${SERVER_DIR}${platform}.js`;

  log('compiling to ', fname);

  var dt = new Date() + '';
  fs.writeFileSync( fname, `// generated by build ${dt}\n${text}` );
  
  return fname;
}

function bundleAppJS() {
  mkdir( WEB_DIR + 'js');

  var app = APP_NAME;
  var fp  = MODE === 'dev' ? ' --full-paths ' : '';
  var dir = WEB_DIR;
  var ent = _compileTemplate('browser');
  var bnd = `${dir}js/${app}.js`;
  var cmd = `browserify app/**/*.js -e ${ent} -t babelify --noparse=http -u http -u stream-http ${fp} -o ${bnd}`;

  clog('creating bundle',bnd);
  log(`spawning browser(ify) ${cmd}`);

  return execp(cmd).then( () => _compileTemplate('server', SERVER_DIR + 'index.js') );
}

function bundleVendorJSFiles() {  
  
  // soundmanager with debug is very noisy
  
  var vendorJSSources = {
    dev: [
        'node_modules/jquery/dist/jquery.js',
        'node_modules/bootstrap/dist/js/bootstrap.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug.js'
        //'node_modules/react/dist/react.js'
        ],
    prod: [
        'node_modules/jquery/dist/jquery.min.js',
        'node_modules/bootstrap/dist/js/bootstrap.min.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug-jsmin.js'
        //'node_modules/react/dist/react.min.js'
    ]
  };
  return bundleVendorFiles(vendorJSSources[MODE],'js');
}

function publishVendorFontFiles() {

  mkdir( WEB_DIR + 'fonts');

  var rootd = 'node_modules/font-awesome/';

  return publishDir(rootd + 'fonts/*.*', rootd );
}

function publishVendorSWFFiles() {

  mkdir( WEB_DIR + 'swf');

  var rootd = 'node_modules/soundmanager2/';

  return publishDir( rootd + 'swf/soundmanager2{_flash9.swf,.swf}' ,rootd);
}

function bundleVendorCSSFiles() {

  var vendorCSSSources = {
    dev: [
      'node_modules/bootstrap/dist/css/bootstrap.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.css',
      'node_modules/font-awesome/css/font-awesome.css',
    ],
    prod: [
      'node_modules/bootstrap/dist/css/bootstrap.min.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.min.css',
      'node_modules/font-awesome/css/font-awesome.min.css',
    ]
  };
  return bundleVendorFiles(vendorCSSSources[MODE],'css');
}

function publishDir(files,rootd) {
  return globp( files )
    .then( fnames => fnames.forEach( f => copy( f, f.replace(rootd, WEB_DIR) ) ) );
}

function bundleVendorFiles(arr,outext) {
  var dir = WEB_DIR + outext;
  mkdir(dir);
  return bundleFiles(arr, dir + '/vendor.' + outext, /\/jquery\//);
}

function bundleAppFiles(arr,outext) {

  var dir = WEB_DIR + outext;
  var app = APP_NAME;
  mkdir(dir);
  log(' => ', outext, arr);
  return bundleFiles(arr, `${dir}/${app}.${outext}`, /\/shared\//);
}

function bundleFiles(arr,destination,sortpri) {
  var fd = null;

  clog( 'creating bundle ', destination  );
  log( ' => ', arr );
  
  return fopen(destination, 'w')
    .then( function(fileDescriptor) {
        fd = fileDescriptor;
        var hash = {};
        arr.forEach( n => hash[n] = fread(n,'utf8') );
        return rsvp.hash(hash);
      })
    .then( function(hash) {
        var data = Object.keys(hash)
                         .sort( (a,b) => a.match(sortpri) !== null ? -1 : 1 )
                         .map( k => hash[k] )
                         .join( `\n/* ccmbuildjoint */\n` );
        fs.write(fd,data);
        fs.close(fd);
      });
}

function copy(src,dest) {

  log(`copying ${src} => ${dest}`);

  fs.createReadStream(src)
    .on('error', err )
    .pipe(fs.createWriteStream(dest));
}

function err(err) {
  clog('Error : ' + err.message);
  process.exit(1);
}

function mkdir( dir ) {
  log('making dir',dir);
  mkdirp.sync(dir);
}

function log() {
  if( verbose ) {
    console.log.apply(console.log,arguments);
  }
}

function execp(cmd)
{
  return new rsvp.Promise( function(success,reject) {
    exec(cmd,function(err, stdout /*, stderr*/ ) {
      if( err ) {
        clog(stdout);
        reject(err);
      } else {
        var name = cmd.split(/\s+/)[0];
        log( 'Result from: ', name, stdout || '(empty)');
        success(stdout);
      }
    });
  });
}

function tmpDir() {
  return './tmp/' + nowString() + '/';
}

function nowString() { 
  function t(n) { return Number(n) < 10 ? '0' + n : n; }
  var d = new Date(); return (1900+d.getYear())+''+t(1+d.getMonth())+t(d.getDay())+''+t(d.getHours())+t(d.getMinutes())+t(d.getSeconds())+d.getMilliseconds(); 
}
