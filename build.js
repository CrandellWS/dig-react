#!/usr/bin/env node
/* eslint no-console:0 */
process.env.NODE_DEBUG = fs;

var fs         = require('fs');
var path       = require('path');
var glob       = require('glob');
var del        = require('del');
var rsvp       = require('rsvp');
var exec       = require('child_process').exec;
var argv       = require('minimist')(process.argv.slice(2));

var fopen   = rsvp.denodeify(fs.open);
var fread   = rsvp.denodeify(fs.readFile);
var globp   = rsvp.denodeify(glob);
var frename = rsvp.denodeify(fs.rename);

var MODE     = argv.mode || (argv.p ? 'prod' : 'dev');
var buildAll = argv.all || argv.a || argv.p;
var verbose  = argv.verbose || argv.v || false;

console.log( '------------------------ Building ------------------------');
console.log( ' options: ', argv );
console.log( ' MODE(', MODE, ') ALL(', buildAll, ') VERBOSE(', verbose, ') ' );
console.log( '----------------------------------------------------------');

var TEMP_DIR   = 'tmp/';
var BUILD_DIR  = MODE === 'dev' ? './' : TEMP_DIR;
var WEB_DIR    = 'dist/';
var SERVER_DIR = 'built/';
var APP_NAME   = 'dig';

build();

function build() {

  if( buildAll ) {

    lintSource()
      .then( () => clean() )
      .then( () => mkdirs() )
      .then( () => rsvp.all(_commonBuilders()) )
      .then( () => rsvp.all(_allBuilders()) )
      .then( () => minifyDist() )
      .then( () => stageResults() )
      .then( () => console.log('build done') )
      .catch( err );    

  } else {

    lintSource()
      .then( () => rsvp.all(_commonBuilders()) )
      .then( () => console.log('build done') )
      .catch( err );    
  }

}

function _commonBuilders() {
  log('fetching common builders');
  return [ 
    bundleAppCSSFiles(),
    publishPublicFiles(),
    //generateRouteIndex(),
    generateComponentIndex(),
    publishServerLibrary(),
    bundleBrowserJS()
  ];
}

function clean() {
  return del( [ 
                BUILD_DIR + WEB_DIR + '**/*', 
                BUILD_DIR + SERVER_DIR + '**/*',
                BUILD_DIR + 'x/**/*'
              ] )
        .then( (files) => { 
            log( `deleted ${files.length} files`);
          });
}

function mkdirs() {
  return new rsvp.Promise( function( success /*, reject */ ) {
      mkdir( BUILD_DIR );
      mkdir( BUILD_DIR + WEB_DIR );
      mkdir( BUILD_DIR + SERVER_DIR );
      success('ok');
    });
}

function stageResults() {
  if( MODE === 'dev' ) {
    return rsvp.resolve(0);
  }

  log('staging results');
  mkdir( BUILD_DIR + 'x' );
  var renames = [
    rename( WEB_DIR,                BUILD_DIR + 'x/' + WEB_DIR),
    rename( SERVER_DIR,             BUILD_DIR + 'x/' + SERVER_DIR),
    rename( BUILD_DIR + WEB_DIR,    WEB_DIR ),
    rename( BUILD_DIR + SERVER_DIR, SERVER_DIR )
  ];

  return rsvp.all(renames).then( () => clean() );
}

function rename( from, to ) {
  log( `renaming ${from} => ${to}` );
  return frename( from, to );
}

function _allBuilders() {
  log('fetching build all builders');
  return [ 
      bundleVendorJSFiles(), 
      bundleVendorCSSFiles(), 
      publishFontFiles(),
      publishSMFiles(),
    ];  
}

function generateIndexJS(dir,formatter) {
  var str = `// this file is generated by the build process \n\nmodule.exports = { \n`;
  var iname = `./app/${dir}/index.js`;

  return del( iname )
    .then( function() {
      return globp(`./app/${dir}/*`);
    }).then( function(files) {
      files.forEach( f => {
        var name = path.parse(f).name;
        var rname = formatter(name);
        str += `  ${rname}: require('./${name}'),\n`;
      });
      str += `\n};\n\n`;
      log(`writing ${iname}`);
      fs.writeFileSync( iname, str, 'utf8' );
    });
}

/*
function generateRouteIndex() {
  return generateIndexJS('routes', n => n.replace(/-?(r|R)oute$/,''));
}
*/

function generateComponentIndex() {
  return generateIndexJS('components', n => n);
}

function lintSource() {
  log('invoking lint');
  return execp('eslint app');
}

function publishServerLibrary() {
  log('spawing babel for server libs');
  var cmd = 'babel app --out-dir ' + BUILD_DIR + SERVER_DIR;
  return execp(cmd);
}

function minifyDist() {
  if( MODE === 'dev' ) {
    log( 'skipping minify' );
    return rsvp.resolve({});
  }
  var dir = BUILD_DIR + WEB_DIR;
  var app = APP_NAME;
  log(`spawing uglify for ${dir} js/css`);
  var cssCmd = `uglify -s ${dir}css/${app}.css  -o ${dir}css/${app}.css -c`;
  var jsCmd  = `uglify -s ${dir}js/${app}.js -o ${dir}js/${app}.js`;
  return execp(cssCmd).then( () => execp( jsCmd ) );
}

function publishPublicFiles() {

  mkdir( BUILD_DIR + WEB_DIR + 'images');

  return globp('public/{*.html,*.ico,*.xml,*.txt,images/*.*}')
    .then( fnames => fnames.forEach( f => copy( f, f.replace('public/', BUILD_DIR + WEB_DIR ) ) ) );
}

function bundleAppCSSFiles() {
  return globp( 'public/css/*.css' )
    .then( files => bundleAppFiles(files,'css') );
}

function _writeBrowserJS() {
  var text = fs.readFileSync( 'app/browser.template', 'utf8' );
  var app = APP_NAME;
  text = text.replace(/\{app\}/g, app );
  var fname = `app/${app}-browser.js`;
  fs.writeFileSync( fname, `// generated by build\n${text}` );
  return fname;
}

function bundleBrowserJS() {
  mkdir( BUILD_DIR + WEB_DIR + 'js');

  var app = APP_NAME;
  var fp  = MODE === 'dev' ? ' --full-paths ' : '';
  var dir = BUILD_DIR + WEB_DIR;
  var ent = _writeBrowserJS();
  var cmd = `browserify app/**/*.js -e ${ent} -t babelify --noparse=http -u http -u stream-http ${fp} -o ${dir}js/${app}.js`;

  log(`creating browser(ify) ${cmd}`);

  return execp(cmd);
}

function bundleVendorJSFiles() {  
  
  // soundmanager with debug is very noisy
  
  var vendorJSSources = {
    dev: [
        'node_modules/jquery/dist/jquery.js',
        'node_modules/bootstrap/dist/js/bootstrap.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug.js'
        //'node_modules/react/dist/react.js'
        ],
    prod: [
        'node_modules/jquery/dist/jquery.min.js',
        'node_modules/bootstrap/dist/js/bootstrap.min.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug-jsmin.js'
        //'node_modules/react/dist/react.min.js'
    ]
  };
  return bundleVendorFiles(vendorJSSources[MODE],'js');
}

function publishFontFiles() {

  mkdir( BUILD_DIR + WEB_DIR + 'fonts');

  var rootd = 'node_modules/font-awesome/';

  return publishDir(rootd + 'fonts/*.*', rootd );
}

function publishSMFiles() {

  mkdir( BUILD_DIR + WEB_DIR + 'swf');

  var rootd = 'node_modules/soundmanager2/';

  return publishDir( rootd + 'swf/soundmanager2{_flash9.swf,.swf}' ,rootd);
}

/*
function publishSourceMaps() {

  mkdir( BUILD_DIR + WEB_DIR + 'css');

  if( MODE === 'dev' ) {

    var fromTos = [
      {
        from: 'node_modules/bootstrap/dist/css/bootstrap-theme.css.map',
        to: BUILD_DIR + WEB_DIR + 'css/bootstrap-theme.css.map'
      }
    ];

    fromTos.forEach( ft => copy(ft.from, ft.to) );
  }
}
*/

function bundleVendorCSSFiles() {

  var vendorCSSSources = {
    dev: [
      'node_modules/bootstrap/dist/css/bootstrap.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.css',
      'node_modules/font-awesome/css/font-awesome.css',
    ],
    prod: [
      'node_modules/bootstrap/dist/css/bootstrap.min.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.min.css',
      'node_modules/font-awesome/css/font-awesome.min.css',
    ]
  };
  return bundleVendorFiles(vendorCSSSources[MODE],'css');
}

function publishDir(files,rootd) {
  return globp( files )
    .then( fnames => fnames.forEach( f => copy( f, f.replace(rootd,BUILD_DIR + WEB_DIR) ) ) );
}

function bundleVendorFiles(arr,outext) {
  var dir = BUILD_DIR + WEB_DIR + outext;
  mkdir(dir);
  return bundleFiles(arr, dir + '/vendor.' + outext);
}

function bundleAppFiles(arr,outext) {

  var dir = BUILD_DIR + WEB_DIR + outext;
  var app = APP_NAME;
  mkdir(dir);
  return bundleFiles(arr, `${dir}/${app}.${outext}`);
}

function bundleFiles(arr,destination) {
  var fd = null;

  log( 'creating bundle ', destination, arr );

  return fopen(destination, 'w')
    .then( function(fileDescriptor) {
        fd = fileDescriptor;
        var promises = arr.map( n => fread(n,'utf8') );
        return rsvp.all(promises);
      })
    .then( function(datas) {
        fs.write(fd,datas.join(`\n/* ccmbuildjoint */\n`));
        fs.close(fd);
      });
}

function copy(src,dest) {

  if( verbose ) {
    log(`copying ${src} => ${dest}`);
  }

  fs.createReadStream(src)
    .on('error', err )
    .pipe(fs.createWriteStream(dest));
}

function err(err) {
  console.log('Error : ' + err.message);
  process.exit(1);
}

function mkdir( dir ) {
  try { 
    fs.mkdirSync(dir); 
    log('created directory', dir);
  } catch(e) { 
    return e;
  }
}

function log() {
  if( verbose ) {
    console.log.apply(console.log,arguments);
  }
}

function execp(cmd)
{
  return new rsvp.Promise( function(success,reject) {
    exec(cmd,function(err, stdout /*, stderr*/ ) {
      if( err ) {
        console.log(stdout);
        reject(err);
      } else {
        log( 'Result from: ', cmd.split(/\s+/)[0], stdout || '(empty)');
        success(stdout);
      }
    });
  });
}
