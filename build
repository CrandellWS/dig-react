#!/usr/bin/env node
/* eslint no-console:0 */
process.env.NODE_DEBUG = fs;
var clog = console.log;

var fs      = require('fs');
var glob    = require('glob');
var del     = require('del');
var rsvp    = require('rsvp');
var argv    = require('minimist')(process.argv.slice(2));
var globp   = rsvp.denodeify(glob);

var bt = require('./bin/build-tools');

var apps = [ 'dig', 'pells', 'stems', 'playlists' ];

var MODE     = argv.mode || (argv.p ? 'prod' : 'dev');
var buildAll = argv.all || argv.a || argv.p || false;
var verbose  = argv.verbose || argv.v || false;
var APP_NAME = null;

apps.forEach( _appName => {
  if( argv[_appName] ) {
    APP_NAME = _appName;
  }
});

if( !APP_NAME ) {
  APP_NAME = app[0];
}

clog( '------------------------ Building ------------------------');
clog( ' buiding at: ', new Date() + '');
clog( ' options: ', argv );
clog( ' APP(', APP_NAME, ') MODE(', MODE, ') ALL(', buildAll, ') VERBOSE(', verbose, ') ' );
clog( '----------------------------------------------------------');

var TEMP_DIR      = bt.tmpDir();

//
// in dev mode we just build in place
// in prod mode we build in tmp/ and need
// to stage after
//
var BUILD_DIR     = MODE === 'dev' ? './' : TEMP_DIR;

var SERVER_TARGET = APP_NAME + '/';
var WEB_TARGET    = SERVER_TARGET + 'web/';

var SERVER_DIR    = BUILD_DIR + SERVER_TARGET;

// N.B. WEB_DIR is assumed to be below SERVER_DIR
var WEB_DIR       = SERVER_DIR + 'web/';

build();

function build() {

  bt.initLogs( clog, log );

  var commonBuilders = [ 
        bundleAppCSSFiles,
        publishAppPublicFiles,
        bundleAppJS
      ];  

  if( buildAll ) {

    var allBuilders = [ 
          bundleVendorJSFiles, 
          bundleVendorCSSFiles, 
          publishVendorFontFiles,
          publishVendorSWFFiles,
        ];

    lintSource()
      .then( () => bt.mkdirs(WEB_DIR) )
      .then( () => publishServerLibrary() )
      .then( () => bt.makePromises( commonBuilders ) )
      .then( () => bt.makePromises( allBuilders ) )
      .then( () => minifyDist() )
      .then( () => stageResults() )
      .then( () => clean() )
      .then( () => clog('build done') )
      .catch( bt.err );    

  } else {

    lintSource()
      .then( () => publishServerLibrary() )
      .then( () => bt.makePromises( commonBuilders ) )
      .then( () => clog('build done') )
      .catch( bt.err );    
  }

}

function clean() {
  if( MODE === 'dev' ) {
    return rsvp.resolve(0);
  }
  var delfiles = [ TEMP_DIR ];
  clog('delfiles ', delfiles );
  return del( delfiles )
        .then( (files) => { 
            clog( `deleted ${files.length} files`);
          });
}


function stageResults() {
  if( MODE === 'dev' ) {
    return rsvp.resolve(0);
  }

  clog('staging results');

  var tmp = bt.tmpDir();

  bt.mkdir( SERVER_TARGET ); // first time ever build requires this

  return bt.rename( SERVER_TARGET, tmp )
          .then( () => bt.rename( SERVER_DIR, SERVER_TARGET ))
          .then( () => del( [tmp+'**',tmp] ) )
          .then( (files) => { 
            log( `deleted ${files.length} files in ${tmp}`);
          });
}

function generateComponentIndex() {

  var all = [];

  apps.forEach( _appName => all.push( bt.generateIndexJS('./app/components', _appName, n => n ) ) );

  return rsvp.all(all).then( () => bt.generateIndexJS('./app', 'components', n => n ) );
}

function generateMixinsIndex() {
  return bt.generateIndexJS('./app', 'mixins', n => bt.camelize(n) );
}

function generateIndecies() {
  return bt.makePromises( [
            generateComponentIndex,
            generateMixinsIndex,
          ]);
}

function lintSource() {
  clog('invoking lint');
  return bt.execp('eslint app');
}

function publishServerLibrary() {
  log('creating server runtime')
  var cmd = 'babel app --out-dir ' + SERVER_DIR;
  clog('compiling to ',SERVER_DIR);
  return generateIndecies().then( () => bt.execp(cmd) );
}

function minifyDist() {
  if( MODE === 'dev' ) {
    log( 'skipping minify' );
    return rsvp.resolve({});
  }
  var dir = WEB_DIR;
  var app = APP_NAME;
  log(`spawning uglify for ${dir} js/css`);
  var cssCmd = `uglify -s ${dir}css/${app}.css  -o ${dir}css/${app}.css -c`;
  var jsCmd  = `uglify -s ${dir}js/${app}.js -o ${dir}js/${app}.js`;
  return bt.execp(cssCmd).then( () => bt.execp( jsCmd ) );
}

function publishAppPublicFiles() {

  bt.mkdir( WEB_DIR + 'images');

  var rootd = /public\/[^\/]+\//;
  clog('publishing web files to',WEB_DIR);

  return globp( `public/{shared,${APP_NAME}}/{*.html,*.ico,*.xml,*.txt,*.png,images/*.*}`)
    .then( fnames => fnames.forEach( f => bt.copy( f, f.replace(rootd, WEB_DIR ) ) ) );    
}

/**/
function bundleAppCSSFiles() {
  return globp( `public/{shared,${APP_NAME}}/css/*.css` )
    .then( files => bundleAppFiles(files,'css') );
}
/**/

function _compileTemplate(platform, outfile) {

  var text  = fs.readFileSync( `app/${platform}.template`, 'utf8' );
  var app   = APP_NAME;
      text  = text.replace(/\{app\}/g, app );
      text  = text.replace(/\{debugMode\}/g, MODE == 'dev' ? 'true' : 'false' );
  var fname = outfile || `${SERVER_DIR}${platform}.js`;

  log('compiling to ', fname);

  var dt = new Date() + '';
  fs.writeFileSync( fname, `// generated by build ${dt}\n${text}` );
  
  return fname;
}

function bundleAppJS() {
  bt.mkdir( WEB_DIR + 'js');

  var app = APP_NAME;
  var fp  = MODE === 'dev' ? ' --full-paths ' : '';
  var dir = WEB_DIR;
  var ent = _compileTemplate('browser');
  var bnd = `${dir}js/${app}.js`;
  // some magic in package.json in the
  // "browserify-shim" section
  var cmd = `browserify -t babelify -t browserify-shim --noparse=http  -x react -x react-dom -u http -u stream-http ${fp} -o ${bnd} ${ent} `;

  clog('creating bundle',bnd);
  log(`spawning browser(ify) ${cmd}`);

  return bt.execp(cmd).then( () => _compileTemplate('server', SERVER_DIR + 'index.js') );
}

function bundleVendorJSFiles() {  
  
  // soundmanager with debug is very noisy
  
  var vendorJSSources = {
    dev: [
        'node_modules/jquery/dist/jquery.js',
        'node_modules/bootstrap/dist/js/bootstrap.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug.js',
        'node_modules/react/dist/react.js',
        'node_modules/react-dom/dist/react-dom.js'
        ],
    prod: [
        'node_modules/jquery/dist/jquery.min.js',
        'node_modules/bootstrap/dist/js/bootstrap.min.js',
        'node_modules/soundmanager2/script/soundmanager2-nodebug-jsmin.js',
        'node_modules/react/dist/react.min.js',
        'node_modules/react-dom/dist/react-dom.min.js'
    ]
  };

  if( APP_NAME === 'pells' || APP_NAME === 'stems') {
    vendorJSSources.dev. push( 'node_modules/nouislider/distribute/nouislider.js');
    vendorJSSources.prod.push( 'node_modules/nouislider/distribute/nouislider.min.js');
  }
  if( APP_NAME === 'stems') {
    vendorJSSources.dev. push( 'vendor/flacplayer/aurora/aurora.js');
    vendorJSSources.prod.push( 'vendor/flacplayer/aurora/aurora.min.js');
    vendorJSSources.dev. push( 'vendor/flacplayer/flac/flac.js');
    vendorJSSources.prod.push( 'vendor/flacplayer/flac/flac.min.js');    
  }

  return bundleVendorFiles(vendorJSSources[MODE],'js');
}

function publishVendorFontFiles() {

  bt.mkdir( WEB_DIR + 'fonts');

  var rootd = 'node_modules/font-awesome/';

  return bt.publishDir(rootd + 'fonts/*.*', rootd, WEB_DIR );
}

function publishVendorSWFFiles() {

  bt.mkdir( WEB_DIR + 'swf');

  var rootd = 'node_modules/soundmanager2/';

  return bt.publishDir( rootd + 'swf/soundmanager2{_flash9.swf,.swf}' ,rootd, WEB_DIR);
}

function bundleVendorCSSFiles() {

  var vendorCSSSources = {
    dev: [
      'node_modules/bootstrap/dist/css/bootstrap.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.css',
      'node_modules/font-awesome/css/font-awesome.css',
    ],
    prod: [
      'node_modules/bootstrap/dist/css/bootstrap.min.css',
      'node_modules/bootstrap/dist/css/bootstrap-theme.min.css',
      'node_modules/font-awesome/css/font-awesome.min.css',
    ]
  };
  if( APP_NAME === 'pells' || APP_NAME === 'stems') {
    vendorCSSSources.dev. push('node_modules/nouislider/distribute/nouislider.min.css');
    vendorCSSSources.prod.push('node_modules/nouislider/distribute/nouislider.min.css');
  }  
  return bundleVendorFiles(vendorCSSSources[MODE],'css');
}


function bundleVendorFiles(arr,outext) {
  var dir = WEB_DIR + outext;
  bt.mkdir(dir);
  var sep = outext === 'js' ? ';' : '';
  return bt.bundleFiles(arr, dir + '/vendor.' + outext, /\/(jquery|react|aurora)\//, sep);
}

function bundleAppFiles(arr,outext) {

  var dir = WEB_DIR + outext;
  var app = APP_NAME;
  bt.mkdir(dir);
  log(' => ', outext, arr);
  return bt.bundleFiles(arr, `${dir}/${app}.${outext}`, /\/shared\//);
}

function log() {
  if( verbose ) {
    console.log.apply(console.log,arguments);
  }
}

